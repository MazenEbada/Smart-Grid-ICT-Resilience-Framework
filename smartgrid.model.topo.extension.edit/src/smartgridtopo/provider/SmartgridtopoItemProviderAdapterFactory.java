/**
 */
package smartgridtopo.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import smartgridtopo.util.SmartgridtopoAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class SmartgridtopoItemProviderAdapterFactory extends SmartgridtopoAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public SmartgridtopoItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.SmartGridTopology} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartGridTopologyItemProvider smartGridTopologyItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.SmartGridTopology}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartGridTopologyAdapter() {
		if (smartGridTopologyItemProvider == null) {
			smartGridTopologyItemProvider = new SmartGridTopologyItemProvider(this);
		}

		return smartGridTopologyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.PowerGridNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PowerGridNodeItemProvider powerGridNodeItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.PowerGridNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPowerGridNodeAdapter() {
		if (powerGridNodeItemProvider == null) {
			powerGridNodeItemProvider = new PowerGridNodeItemProvider(this);
		}

		return powerGridNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.SmartMeter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartMeterItemProvider smartMeterItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.SmartMeter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartMeterAdapter() {
		if (smartMeterItemProvider == null) {
			smartMeterItemProvider = new SmartMeterItemProvider(this);
		}

		return smartMeterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.SmartMeterType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartMeterTypeItemProvider smartMeterTypeItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.SmartMeterType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartMeterTypeAdapter() {
		if (smartMeterTypeItemProvider == null) {
			smartMeterTypeItemProvider = new SmartMeterTypeItemProvider(this);
		}

		return smartMeterTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.PhysicalConnection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PhysicalConnectionItemProvider physicalConnectionItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.PhysicalConnection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPhysicalConnectionAdapter() {
		if (physicalConnectionItemProvider == null) {
			physicalConnectionItemProvider = new PhysicalConnectionItemProvider(this);
		}

		return physicalConnectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.Repository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryItemProvider repositoryItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.Repository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryAdapter() {
		if (repositoryItemProvider == null) {
			repositoryItemProvider = new RepositoryItemProvider(this);
		}

		return repositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.ConnectionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectionTypeItemProvider connectionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.ConnectionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectionTypeAdapter() {
		if (connectionTypeItemProvider == null) {
			connectionTypeItemProvider = new ConnectionTypeItemProvider(this);
		}

		return connectionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.NetworkNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkNodeItemProvider networkNodeItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.NetworkNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkNodeAdapter() {
		if (networkNodeItemProvider == null) {
			networkNodeItemProvider = new NetworkNodeItemProvider(this);
		}

		return networkNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.NetworkNodeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetworkNodeTypeItemProvider networkNodeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.NetworkNodeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetworkNodeTypeAdapter() {
		if (networkNodeTypeItemProvider == null) {
			networkNodeTypeItemProvider = new NetworkNodeTypeItemProvider(this);
		}

		return networkNodeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.ControlCenter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlCenterItemProvider controlCenterItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.ControlCenter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlCenterAdapter() {
		if (controlCenterItemProvider == null) {
			controlCenterItemProvider = new ControlCenterItemProvider(this);
		}

		return controlCenterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.GenericController} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GenericControllerItemProvider genericControllerItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.GenericController}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGenericControllerAdapter() {
		if (genericControllerItemProvider == null) {
			genericControllerItemProvider = new GenericControllerItemProvider(this);
		}

		return genericControllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.InterCom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InterComItemProvider interComItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.InterCom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInterComAdapter() {
		if (interComItemProvider == null) {
			interComItemProvider = new InterComItemProvider(this);
		}

		return interComItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link smartgridtopo.LogicalCommunication} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogicalCommunicationItemProvider logicalCommunicationItemProvider;

	/**
	 * This creates an adapter for a {@link smartgridtopo.LogicalCommunication}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogicalCommunicationAdapter() {
		if (logicalCommunicationItemProvider == null) {
			logicalCommunicationItemProvider = new LogicalCommunicationItemProvider(this);
		}

		return logicalCommunicationItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
