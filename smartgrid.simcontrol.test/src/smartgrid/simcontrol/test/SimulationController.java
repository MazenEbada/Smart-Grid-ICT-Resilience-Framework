package smartgrid.simcontrol.test;



import org.apache.log4j.Logger;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.ILaunchConfiguration;

import smartgrid.log4j.LoggingInitializer;
import smartgrid.simcontrol.test.baselib.Constants;
import smartgrid.simcontrol.test.rmi.BlockingKritisDataExchanger;
import couplingToICT.PowerAssigned;
import couplingToICT.PowerSpecContainer;
import couplingToICT.SmartComponentStateContainer;
import couplingToICT.SmartGridTopoContainer;

public final class SimulationController {

    private static final Logger LOG = Logger.getLogger(SimulationController.class);

    private ReactiveSimulationController reactiveSimControl;
    //private IKritisSimulationWrapper kritisSimulation;

    private int maxTimeSteps;

    public void run() throws InterruptedException {
        PowerAssigned powerAssigned;
		try {
			powerAssigned = null;
			powerAssigned = BlockingKritisDataExchanger.getPowerAssigned();

			SmartComponentStateContainer scsc = null;
	        // one iteration computes one timestep
	        for (int timeStep = 0; timeStep < maxTimeSteps; timeStep++) {
	        	scsc = reactiveSimControl.run(powerAssigned); 
	        }
	        
	        BlockingKritisDataExchanger.storeSCSC(scsc);
	        
	        PowerSpecContainer bufferedPowerSpecs = BlockingKritisDataExchanger.getBufferedPowerSpecs();
	        PowerSpecContainer modifiedPowerSpecs = reactiveSimControl.modifyPowerSpecContainer(bufferedPowerSpecs);
	        BlockingKritisDataExchanger.storeModifiedPowerSpecs(modifiedPowerSpecs);
	        
	        LOG.info("Coupled simulation terminated internally");
	        reactiveSimControl.shutDown();
		} catch (Throwable e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }

    public void init(final ILaunchConfiguration launchConfig) throws CoreException, InterruptedException {

        LoggingInitializer.initialize();

        LOG.debug("init active launch config");

        // read config options
        String outputPath = launchConfig.getAttribute(Constants.OUTPUT_PATH_KEY, "");
        String inputPath = launchConfig.getAttribute(Constants.INPUT_PATH_KEY, "");
        String topoPath = launchConfig.getAttribute(Constants.TOPO_PATH_KEY, "");
        boolean generateTopo = launchConfig.getAttribute(Constants.TOPO_GENERATION_KEY, false);
        maxTimeSteps = Integer.parseUnsignedInt(launchConfig.getAttribute(Constants.TIME_STEPS_KEY, ""));

        LOG.info("Running for " + maxTimeSteps + " time steps");

        reactiveSimControl = new ReactiveSimulationController();
        reactiveSimControl.init(outputPath);

        reactiveSimControl.loadCustomUserAnalysis(launchConfig);

        if (generateTopo) {
            //reactiveSimControl.initModelsAutogenerated();
        	SmartGridTopoContainer topoContainer = BlockingKritisDataExchanger.getTopoData();
        	reactiveSimControl.initTopo(topoContainer);
        } else {
            reactiveSimControl.initModelsFromFiles(topoPath, inputPath);
        }

        //kritisSimulation = TestSimulationExtensionPointHelper.findExtension(launchConfig, TestSimulationExtensionPointHelper.getKritisSimulationExtensions(), Constants.KRITIS_SIMULATION_KEY,
        //        IKritisSimulationWrapper.class);
        //kritisSimulation.init(launchConfig);
        //LOG.info("Using KRITIS simulation: " + kritisSimulation.getName());
    }

    public void shutDown() {
        LOG.info("Coupled simulation terminated externally");
        reactiveSimControl.shutDown();
    }
}
