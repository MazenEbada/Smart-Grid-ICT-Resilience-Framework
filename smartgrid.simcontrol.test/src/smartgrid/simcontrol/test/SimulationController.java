package smartgrid.simcontrol.test;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.debug.core.ILaunchConfiguration;

import smartgrid.helper.TestSimulationExtensionPointHelper;
import smartgrid.log4j.LoggingInitializer;
import smartgrid.simcontrol.test.baselib.Constants;
import smartgrid.simcontrol.test.baselib.coupling.IKritisSimulationWrapper;
import couplingToICT.PowerDemand;
import couplingToICT.PowerSpec;

public final class SimulationController {

    private static final Logger LOG = Logger.getLogger(SimulationController.class);

    private ReactiveSimulationController reactiveSimControl;
    private IKritisSimulationWrapper kritisSimulation;

    private int maxTimeSteps;

    public void run() throws InterruptedException {
        PowerDemand powerDemand = reactiveSimControl.getPowerDemand();
        LinkedHashMap<String, HashMap<String, PowerSpec>> powerdemandsLinkedMap = powerDemand.getPowerDemands();
        Map<String,Map<String, PowerSpec>> powerDemands = new LinkedHashMap< String, Map<String, PowerSpec>>(powerdemandsLinkedMap);
        
        // one iteration computes one timestep
        for (int timeStep = 0; timeStep < maxTimeSteps; timeStep++) {
           reactiveSimControl.run_new(null); //TODO
        }

        LOG.info("Coupled simulation terminated internally");
        reactiveSimControl.shutDown();
    }

    public void init(final ILaunchConfiguration launchConfig) throws CoreException, InterruptedException {

        LoggingInitializer.initialize();

        LOG.debug("init active launch config");

        // read config options
        String outputPath = launchConfig.getAttribute(Constants.OUTPUT_PATH_KEY, "");
        String inputPath = launchConfig.getAttribute(Constants.INPUT_PATH_KEY, "");
        String topoPath = launchConfig.getAttribute(Constants.TOPO_PATH_KEY, "");
        boolean generateTopo = launchConfig.getAttribute(Constants.TOPO_GENERATION_KEY, false);
        maxTimeSteps = Integer.parseUnsignedInt(launchConfig.getAttribute(Constants.TIME_STEPS_KEY, ""));

        LOG.info("Running for " + maxTimeSteps + " time steps");

        reactiveSimControl = new ReactiveSimulationController();
        reactiveSimControl.init(outputPath);

        reactiveSimControl.loadCustomUserAnalysis(launchConfig);

        if (generateTopo) {
            reactiveSimControl.initModelsAutogenerated();
        } else {
            reactiveSimControl.initModelsFromFiles(topoPath, inputPath);
        }

        kritisSimulation = TestSimulationExtensionPointHelper.findExtension(launchConfig, TestSimulationExtensionPointHelper.getKritisSimulationExtensions(), Constants.KRITIS_SIMULATION_KEY,
                IKritisSimulationWrapper.class);
        kritisSimulation.init(launchConfig);
        LOG.info("Using KRITIS simulation: " + kritisSimulation.getName());
    }

    public void shutDown() {
        LOG.info("Coupled simulation terminated externally");
        reactiveSimControl.shutDown();
    }
}
